// Code generated by mockery v1.0.0. DO NOT EDIT.

package mockevents

import (
	events "github.com/hyperledger/firefly-fabconnect/internal/events"
	api "github.com/hyperledger/firefly-fabconnect/internal/events/api"

	http "net/http"

	httprouter "github.com/julienschmidt/httprouter"

	kvstore "github.com/hyperledger/firefly-fabconnect/internal/kvstore"

	mock "github.com/stretchr/testify/mock"

	util "github.com/hyperledger/firefly-fabconnect/internal/rest/utils"
)

// SubscriptionManager is an autogenerated mock type for the SubscriptionManager type
type SubscriptionManager struct {
	mock.Mock
}

// AddStream provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) AddStream(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*events.StreamInfo, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *events.StreamInfo
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *events.StreamInfo); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*events.StreamInfo)
		}
	}

	var r1 *util.RestError
	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// AddSubscription provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) AddSubscription(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*api.SubscriptionInfo, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *api.SubscriptionInfo
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *api.SubscriptionInfo); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SubscriptionInfo)
		}
	}

	var r1 *util.RestError
	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *SubscriptionManager) Close() {
	_m.Called()
}

// DeleteStream provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) DeleteStream(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*map[string]string, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *map[string]string
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *map[string]string); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]string)
		}
	}

	var r1 *util.RestError
	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) DeleteSubscription(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*map[string]string, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *map[string]string
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *map[string]string); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]string)
		}
	}

	var r1 *util.RestError
	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// Init provides a mock function with given fields: mocked
func (_m *SubscriptionManager) Init(mocked ...kvstore.KVStore) error {
	_va := make([]interface{}, len(mocked))
	for _i := range mocked {
		_va[_i] = mocked[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...kvstore.KVStore) error); ok {
		r0 = rf(mocked...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetSubscription provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) ResetSubscription(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*map[string]string, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *map[string]string
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *map[string]string); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]string)
		}
	}

	var r1 *util.RestError
	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// ResumeStream provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) ResumeStream(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*map[string]string, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *map[string]string
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *map[string]string); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]string)
		}
	}

	var r1 *util.RestError
	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// StreamByID provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) StreamByID(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*events.StreamInfo, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *events.StreamInfo
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *events.StreamInfo); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*events.StreamInfo)
		}
	}

	var r1 *util.RestError
	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// Streams provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) Streams(res http.ResponseWriter, req *http.Request, params httprouter.Params) []*events.StreamInfo {
	ret := _m.Called(res, req, params)

	var r0 []*events.StreamInfo
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) []*events.StreamInfo); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*events.StreamInfo)
		}
	}

	return r0
}

// SubscriptionByID provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) SubscriptionByID(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*api.SubscriptionInfo, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *api.SubscriptionInfo
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *api.SubscriptionInfo); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.SubscriptionInfo)
		}
	}

	var r1 *util.RestError
	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// Subscriptions provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) Subscriptions(res http.ResponseWriter, req *http.Request, params httprouter.Params) []*api.SubscriptionInfo {
	ret := _m.Called(res, req, params)

	var r0 []*api.SubscriptionInfo
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) []*api.SubscriptionInfo); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.SubscriptionInfo)
		}
	}

	return r0
}

// SuspendStream provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) SuspendStream(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*map[string]string, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *map[string]string
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *map[string]string); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]string)
		}
	}

	var r1 *util.RestError
	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// UpdateStream provides a mock function with given fields: res, req, params
func (_m *SubscriptionManager) UpdateStream(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*events.StreamInfo, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *events.StreamInfo
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *events.StreamInfo); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*events.StreamInfo)
		}
	}

	var r1 *util.RestError
	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}
